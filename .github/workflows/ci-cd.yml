name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Database
  DATABASE_USER: ${{ github.repository_owner }}_user
  DATABASE_PASSWORD: ${{ github.sha }}_db_pass
  DATABASE_NAME: app_db_${{ github.ref_name }}
  DATABASE_HOST: database
  DATABASE_PORT: 5432
  
  # Redis
  REDIS_HOST: redis_server
  REDIS_PORT: 6379
  REDIS_PASSWORD: ${{ github.sha }}_redis
  
  # FastAPI
  API_KEY: api_${{ github.sha }}_key
  JWT_SECRET_KEY: ${{ github.sha }}_jwt_secret
  JWT_ALGORITHM: HS256
  ACCESS_TOKEN_EXPIRE_MINUTES: 30
  
  # Next.js
  NEXT_PUBLIC_API_URL: http://fastapi_server:8000
  NEXTAUTH_URL: http://localhost:3000
  NEXTAUTH_SECRET: ${{ github.sha }}_next_secret
  GITHUB_ID: dummy_github_id_123
  GITHUB_SECRET: dummy_github_secret_456
  
  # Grafana
  GF_SECURITY_ADMIN_USER: admin_${{ github.ref_name }}
  GF_SECURITY_ADMIN_PASSWORD: ${{ github.sha }}_grafana
  
  # Caddy
  EXT_ENDPOINT1: https://api.example.com
  LOCAL_1: http://fastapi_server:8000
  LOCAL_2: http://nextjs_server:3000

jobs:
  security-scans:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create reports directory
        run: mkdir -p security-reports

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'security-reports/trivy-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'  # Ne pas échouer la pipeline

      - name: Generate Trivy HTML report
        if: always()
        run: |
          trivy --cache-dir .trivycache/ filesystem --format template --template "@contrib/html.tpl" -o security-reports/trivy-report.html .
          echo "## Trivy Scan Results" > security-reports/summary.md
          trivy --cache-dir .trivycache/ filesystem --severity HIGH,CRITICAL --format table . >> security-reports/summary.md

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Grype scan
        run: |
          grype dir:. -o json > security-reports/grype-results.json
          grype dir:. -o table > security-reports/grype-report.txt
          echo -e "\n## Grype Scan Results" >> security-reports/summary.md
          cat security-reports/grype-report.txt >> security-reports/summary.md

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: security-reports/
          retention-days: 90

  build-and-deploy:
    needs: security-scans
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      
    - name: Install Docker Compose
      run: |
        curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
      
    - name: Set up environment files
      run: |
        # Main .env file
        cat << EOF > .env
        DATABASE_USER=$DATABASE_USER
        DATABASE_PASSWORD=$DATABASE_PASSWORD
        DATABASE_NAME=$DATABASE_NAME
        DATABASE_HOST=$DATABASE_HOST
        DATABASE_PORT=$DATABASE_PORT
        REDIS_HOST=$REDIS_HOST
        REDIS_PORT=$REDIS_PORT
        REDIS_PASSWORD=$REDIS_PASSWORD
        API_KEY=$API_KEY
        JWT_SECRET_KEY=$JWT_SECRET_KEY
        JWT_ALGORITHM=$JWT_ALGORITHM
        ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES
        EOF
        
        # Frontend .env file
        cat << EOF > frontend/.env
        NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
        NEXTAUTH_URL=$NEXTAUTH_URL
        NEXTAUTH_SECRET=$NEXTAUTH_SECRET
        GITHUB_ID=$GITHUB_ID
        GITHUB_SECRET=$GITHUB_SECRET
        EOF

    - name: Build and start containers
      run: |
        docker-compose build
        docker-compose up -d

    - name: Run tests
      run: |
        echo "Running tests..."
        # Ajoutez vos commandes de test ici

    - name: Deploy
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production..."
        # Ajoutez vos commandes de déploiement ici