version: '3.8'

services:
  fastapi_server:
    container_name: fastapi_server
    build: ./backend
    restart: always
    command: "sh -c 'alembic upgrade head && python app/document_ingestion.py  && uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000'"
    volumes:
      - ./backend/app:/code
    expose:
      - 8000
    ports:
      - "8000:8000"
    env_file: ".env"
    depends_on:
      - database
      - jaeger  # Ajouté
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    networks:
      example-network:
        ipv4_address: 172.16.238.14

  nextjs_server:
    container_name: nextjs_server
    build: ./frontend
    restart: always
    command: "sh -c 'node server.js'"
    volumes:
      - ./frontend:/code
    ports:
      - 3000:3000
    expose:
      - 3000
    env_file: "frontend/.env"
    depends_on:
      - fastapi_server
      - jaeger  # Ajouté
    networks:
      example-network:
        ipv4_address: 172.16.238.17

  redis_server:
    image: redis:alpine
    container_name: redis_server
    restart: always
    ports:
      - 6379:6379
    expose:
      - 6379
    env_file: ".env"
    networks:
      example-network:
        ipv4_address: 172.16.238.16

  database:
    image: ankane/pgvector:v0.4.1
    restart: always
    container_name: database
    env_file: ".env"
    user: root
    volumes:
      - ./db_docker:/var/lib/postgresql
      - ./scripts/create-dbs.sql:/docker-entrypoint-initdb.d/create-dbs.sql
    ports:
      - 5432:5432
    expose:
      - 5432
    environment:
      - POSTGRES_USERNAME=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DATABASE=${DATABASE_NAME}
      - POSTGRES_HOST_AUTH_METHOD= "trust"
    networks:
      example-network:
        ipv4_address: 172.16.238.15

  jaeger:  # Nouveau service
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DATASOURCES_DEFAULT_URL=http://prometheus:9090
    depends_on:
      - prometheus
    networks:
      example-network:
        ipv4_address: 172.16.238.12

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9091:9090"
    volumes:
      - ./backend/app/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - fastapi_server
    networks:
      example-network:
        ipv4_address: 172.16.238.11

  caddy_reverse_proxy:
    container_name: caddy_reverse_proxy
    image: caddy:alpine
    restart: always
    ports:
      - 80:80
      - 9090:9090
      - 443:443
    environment:
      - EXT_ENDPOINT1=${EXT_ENDPOINT1}
      - LOCAL_1=${LOCAL_1}
      - LOCAL_2=${LOCAL_2}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

volumes:
  caddy_data:
  caddy_config:
  grafana_data:
  prometheus_data:

networks:
  example-network:
    name: example-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
